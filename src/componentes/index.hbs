   <div id="info">
			<a href="http://threejs.org" target="_blank" rel="noopener">three.js</a> - GLTFLoader<br />
			Battle Damaged Sci-fi Helmet by
			<a href="https://sketchfab.com/theblueturtle_" target="_blank" rel="noopener">theblueturtle_</a><br />
		</div>

		<script src="/librerias/threejs/three.min.js"></script>
			<script src="/librerias/Detector.js"></script>
				<script src="/librerias/GLTFLoader.js"></script>
					<script src="/librerias/stats.min.js"></script>
						<script src="/librerias/OrbitControls.js"></script>
						<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats, controls;
			var camera, scene, renderer, light;

			init();
			

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.25, 20 );
				camera.position.set( -1.8, 0.9, 2.7 );

				controls = new THREE.OrbitControls( camera );
				controls.target.set( 0, -0.2, -0.2 );
				controls.update();

				// envmap
				var path = '/publico/texturas/Bridge2/';
				var format = '.jpg';
				var envMap = new THREE.CubeTextureLoader().load( [
					path + 'posx' + format, path + 'negx' + format,
					path + 'posy' + format, path + 'negy' + format,
					path + 'posz' + format, path + 'negz' + format
				] );

				scene = new THREE.Scene();
				scene.background = envMap;

				light = new THREE.HemisphereLight( 0xbbbbff, 0x444422 );
				light.position.set( 0, 1, 0 );
				scene.add( light );

				// model
				var obj3d1 = new THREE.Object3D();
				var obj3d2 = new THREE.Object3D();
				var obj3d3 = new THREE.Object3D();
				
				var obj3da1=new THREE.Object3D(); 
				var obj3da2=new THREE.Object3D(); 
				var obj3da3=new THREE.Object3D(); 
				var obj3da4=new THREE.Object3D(); 
				var obj3da5=new THREE.Object3D(); 
				var obj3da6=new THREE.Object3D(); 
				var obj3da7=new THREE.Object3D(); 

				var pared1=new THREE.Object3D(); 
				var pared2=new THREE.Object3D(); 

				var mueble=new THREE.Object3D(); 
				var luces=new THREE.Object3D(); 

				var loader = new THREE.GLTFLoader();
				loader.load( '/publico/modelos/Mesa.gltf', function ( gltf ) {

					gltf.scene.traverse( function ( child ) {

						if ( child.isMesh ) {

							child.material.envMap = envMap;

						}

					} );
					
					obj3d1.add(gltf.scene)
					

				} );
				
				loader.load( '/publico/modelos/floor.gltf', function ( gltf ) {

					gltf.scene.traverse( function ( child ) {

						if ( child.isMesh ) {

							child.material.envMap = envMap;

						}

					} );
					obj3d2.add( gltf.scene );
					

				} );
					
				loader.load( '/publico/modelos/silla.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					obj3d3.add( gltf.scene );	} );
				loader.load( '/publico/modelos/silla.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					obj3da1.add( gltf.scene );	} );
				loader.load( '/publico/modelos/silla.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					obj3da2.add( gltf.scene );	} );
				loader.load( '/publico/modelos/silla.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					obj3da3.add( gltf.scene );	} );
				loader.load( '/publico/modelos/silla.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					obj3da4.add( gltf.scene );	} );
				loader.load( '/publico/modelos/silla.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					obj3da5.add( gltf.scene );	} );
				loader.load( '/publico/modelos/silla.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					obj3da6.add( gltf.scene );	} );
				loader.load( '/publico/modelos/silla.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					obj3da7.add( gltf.scene );	} );

				loader.load( '/publico/modelos/paredes_1.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					pared1.add( gltf.scene );	} );
				loader.load( '/publico/modelos/paredes_2.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					pared2.add( gltf.scene );	} );
				loader.load( '/publico/modelos/mueble_2.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					mueble.add( gltf.scene );	} );
				loader.load( '/publico/modelos/lights.gltf', function ( gltf ) {	gltf.scene.traverse( function ( child ) {if ( child.isMesh ) {child.material.envMap = envMap;}	} );
					luces.add( gltf.scene );	} );

				
				
				obj3d1.position.x= 1; 
				obj3d2.position.x= -2.73;
				obj3d3.position.x= 1.33;

				obj3da1.position.x =2.27; obj3da1.position.z =3.5;obj3da1.rotation.y=-Math.PI/2;  
				obj3da2.position.x =2.27; obj3da2.position.z =2.5;obj3da2.rotation.y=-Math.PI/2;  
				
				obj3da3.position.x =-2.27; obj3da1.position.z =3.5;    obj3da3.rotation.y=Math.PI/2;
				obj3da4.position.x =-2.27; obj3da4.position.z =0.95;    obj3da4.rotation.y=Math.PI/2;
				
				obj3da5.position.x =-1.33;obj3da5.position.z =3.3;  obj3da5.rotation.y=-Math.PI; 
				obj3da6.position.x =-1.6;obj3da6.position.z =3.3;  obj3da6.rotation.y=-Math.PI; 
				obj3da7.position.x =-1;obj3da7.position.z =3.3;  obj3da7.rotation.y=-Math.PI; 
				
			
				

				scene.add(obj3d1);
				scene.add(obj3d2 );
				scene.add(obj3d3 );
				scene.add(obj3da1 );
				scene.add(obj3da2 );
				scene.add(obj3da3 );
				scene.add(obj3da4 );
				scene.add(obj3da5 );
				scene.add(obj3da6 );
				scene.add(obj3da7 );
				pared1.position.x= 1; 
				pared2.position.y =6.3; pared2.position.x =1; 
				mueble.position.z = 1.1; mueble.position.y = 0.2; mueble.position.x = -0.25; 
				scene.add(pared1 );scene.add(pared2 );scene.add(mueble );scene.add(luces);


				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.gammaOutput = true;
				container.appendChild( renderer.domElement );

				window.addEventListener( 'resize', onWindowResize, false );

				// stats
				stats = new Stats();
				container.appendChild( stats.dom );
			animate();
			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				renderer.render( scene, camera );

				stats.update();

			}

		</script>