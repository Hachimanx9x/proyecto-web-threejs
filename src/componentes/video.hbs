<script src="/librerias/threejs/three.js"></script>

	<script src="/librerias/Projector.js"></script>
		<script src="/librerias/CanvasRenderer.js"></script>

        	<script src="/librerias/stats.min.js"></script>
 <div id="info">
			Reproduccion de video<a href="/">volver</a>
		</div>
        <!--
        <video id="video" autoplay loop crossOrigin="anonymous" webkit-playsinline style="display:none">
			<source src="/publico/videos/sintel.mp4" type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'>
            
		
		</video>
-->
        	<script>

			var AMOUNT = 100;

			var container, stats;

			var camera, scene, renderer;

			var video, image, imageContext,
			imageReflection, imageReflectionContext, imageReflectionGradient,
			texture, textureReflection;

			var mesh;

			var mouseX = 0;
			var mouseY = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

             var mouse;
            	var raycaster;

			var objectplay = [];var objectstop = [];

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.z = 1000;

				scene = new THREE.Scene();
				scene.background = new THREE.Color( 0x000000);

			//	video = document.getElementById( 'video' );
            video = document.createElement( 'video' );
            var source = document.createElement("source"); 
            source.type= "video/mp4";
            source.src="/publico/videos/gumdang.mp4"; 
            //source.codecs = "avc1.42E01E, mp4a.40.2"; 
            video.appendChild(source); 
                image = document.createElement( 'canvas' );

                video.addEventListener("loadedmetadata", function(){
            	image.width = video.videoWidth;
				image.height = video.videoHeight;

                }, false);

				//

				
				//image.width = video.videoWidth;
				//image.height = video.videoHeight;

				imageContext = image.getContext( '2d' );
				imageContext.fillStyle = '#000000';
				imageContext.fillRect( 0, 0, image.width, image.height );

				texture = new THREE.Texture( image );

				var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );

				imageReflection = document.createElement( 'canvas' );
				imageReflection.width = image.width;
				imageReflection.height = image.height;

				imageReflectionContext = imageReflection.getContext( '2d' );
				imageReflectionContext.fillStyle = '#000000';
				imageReflectionContext.fillRect( 0, 0, image.width, image.height );

				imageReflectionGradient = imageReflectionContext.createLinearGradient( 0, 0, 0, image.height );
				imageReflectionGradient.addColorStop( 0.2, 'rgba(240, 240, 240, 1)' );
				imageReflectionGradient.addColorStop( 1, 'rgba(240, 240, 240, 0.8)' );

				textureReflection = new THREE.Texture( imageReflection );

				var materialReflection = new THREE.MeshBasicMaterial( { map: textureReflection, side: THREE.BackSide, overdraw: 0.5 } );

				//

				var plane = new THREE.PlaneBufferGeometry(image.width, image.height, 4, 4 );

				mesh = new THREE.Mesh( plane, material );
				mesh.scale.x = mesh.scale.y = mesh.scale.z = 1.5;
				scene.add(mesh);

				mesh = new THREE.Mesh( plane, materialReflection );
				mesh.position.y = -306;
				mesh.rotation.x = - Math.PI;
				mesh.scale.x = mesh.scale.y = mesh.scale.z = 1.5;
				scene.add( mesh );

				//

				var separation = 150;
				var amountx = 10;
				var amounty = 10;

				var PI2 = Math.PI * 2;
				var material = new THREE.SpriteCanvasMaterial( {

					color: 0x0808080,
					program: function ( context ) {

						context.beginPath();
						context.arc( 0, 0, 0.5, 0, PI2, true );
						context.fill();

					}

				} );

				for ( var ix = 0; ix < amountx; ix++ ) {

					for ( var iy = 0; iy < amounty; iy++ ) {

						var sprite = new THREE.Sprite( material );
						sprite.position.x = ix * separation - ( ( amountx * separation ) / 2 );
						sprite.position.y = -153;
						sprite.position.z = iy * separation - ( ( amounty * separation ) / 2 );
						sprite.scale.setScalar( 2 );
						scene.add( sprite );

					}

				}
                   var geometry = new THREE.BoxBufferGeometry( 100, 100, 100 );
                    var object1 = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: 0xF60408  } ) );
                    object1.position.x = 100;  object1.position.y = -150; object1.position.z = 500; 
                     var object2 = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: 0x24EB19 } ) );
                    object2.position.x = -100; object2.position.y = -150; object2.position.z = 500; 
                    scene.add( object1 );scene.add( object2 );

                    objectplay.push( object2 );
                    
                    objectstop.push( object1 );


                    raycaster = new THREE.Raycaster();
				mouse = new THREE.Vector2();

				renderer = new THREE.CanvasRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );

				stats = new Stats();
				container.appendChild( stats.dom );

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
                document.addEventListener( 'mousedown', onDocumentMouseDown, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}
        function onDocumentTouchStart( event ) {

				event.preventDefault();

				event.clientX = event.touches[0].clientX;
				event.clientY = event.touches[0].clientY;
				onDocumentMouseDown( event );

			}
            function onDocumentMouseDown( event ) {

				event.preventDefault();

				mouse.x = ( event.clientX / renderer.domElement.clientWidth ) * 2 - 1;
				mouse.y = - ( event.clientY / renderer.domElement.clientHeight ) * 2 + 1;

				raycaster.setFromCamera( mouse, camera );

				var intersects = raycaster.intersectObjects(objectplay );
                var intersects2 = raycaster.intersectObjects(objectstop );
               
				if ( intersects.length > 0 ) {
                    video.play(); 
					//intersects[ 0 ].object.material.color.setHex( Math.random() * 0xffffff );
                    

				}
                if ( intersects2.length > 0 ) {
                    video.pause(); 
					//intersects[ 0 ].object.material.color.setHex( Math.random() * 0xffffff );
                    

				}
               

			}
			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function onDocumentMouseMove( event ) {

				mouseX = ( event.clientX - windowHalfX );
				mouseY = ( event.clientY - windowHalfY ) * 0.2;

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				camera.position.x += ( mouseX - camera.position.x ) * 0.05;
				camera.position.y += ( - mouseY - camera.position.y ) * 0.05;
				camera.lookAt( scene.position );

				if ( video.readyState === video.HAVE_ENOUGH_DATA ) {

					imageContext.drawImage( video, 0, 0 );

					if ( texture ) texture.needsUpdate = true;
					if ( textureReflection ) textureReflection.needsUpdate = true;

				}

				imageReflectionContext.drawImage( image, 0, 0 );
				imageReflectionContext.fillStyle = imageReflectionGradient;
				imageReflectionContext.fillRect( 0, 0, 480, 204 );

				renderer.render( scene, camera );

			}


		</script>